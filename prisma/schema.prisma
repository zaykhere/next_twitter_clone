// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id
  email       String   @unique
  username    String   @unique
  displayName String?
  bio         String?
  location    String?
  job         String?
  website     String?
  img         String?
  cover       String?
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt      @db.Timestamptz(6)

  // RELATIONS
  posts       Post[]
  likes       Like[]
  saves       SavedPosts[]
  followers   Follow[] @relation("UserFollowers")
  followings  Follow[] @relation("UserFollowings")
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt      @db.Timestamptz(6)
  desc        String?
  img         String?
  imgHeight   Int?
  video       String?
  isSensitive Boolean  @default(false)

  // RELATIONS
  user        User     @relation(fields: [userId], references: [id])
  userId      String

  rePostId    Int?
  rePost      Post?    @relation("RePosts", fields: [rePostId], references: [id])
  rePosts     Post[]   @relation("RePosts")

  parentPostId Int?
  parentPost   Post?   @relation("PostComments", fields: [parentPostId], references: [id])
  comments     Post[]  @relation("PostComments")

  likes       Like[]
  saves       SavedPosts[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  // RELATIONS
  userId    String
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model SavedPosts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  // RELATIONS
  userId    String
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Follow {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now()) @db.Timestamptz(6)

  // RELATIONS
  followerId   String
  followingId  String

  follower     User     @relation("UserFollowers", fields: [followerId], references: [id])
  following    User     @relation("UserFollowings", fields: [followingId], references: [id])
}
